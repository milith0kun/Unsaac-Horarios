/**
 * Configuraci√≥n del cliente de Supabase para React + Vite
 * 
 * Este archivo configura la conexi√≥n con Supabase usando las variables de entorno
 * definidas en .env.local para desarrollo y en Vercel para producci√≥n.
 * 
 * IMPORTANTE:
 * - En desarrollo: Las variables se cargan desde .env.local
 * - En producci√≥n (Vercel): Las variables deben configurarse en el panel de Vercel
 * - El prefijo VITE_ es necesario para que Vite exponga las variables al cliente
 */

import { createClient } from '@supabase/supabase-js'

// Obtener las variables de entorno
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

// Validar que las variables de entorno est√©n configuradas
if (!supabaseUrl) {
  throw new Error(
    'VITE_SUPABASE_URL no est√° configurada. ' +
    'Aseg√∫rate de tener el archivo .env.local en desarrollo o ' +
    'configurar las variables de entorno en Vercel para producci√≥n.'
  )
}

if (!supabaseAnonKey) {
  throw new Error(
    'VITE_SUPABASE_ANON_KEY no est√° configurada. ' +
    'Aseg√∫rate de tener el archivo .env.local en desarrollo o ' +
    'configurar las variables de entorno en Vercel para producci√≥n.'
  )
}

// Crear y configurar el cliente de Supabase
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    // Configuraci√≥n de autenticaci√≥n
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  }
})

/**
 * Funci√≥n para verificar la conexi√≥n con Supabase
 * √ötil para debugging y verificaci√≥n de configuraci√≥n
 * 
 * @returns {Promise<{connected: boolean, error?: string}>}
 */
export const verifySupabaseConnection = async () => {
  try {
    console.log('üîç Verificando conexi√≥n con Supabase...')
    console.log('üìç URL:', supabaseUrl)
    console.log('üîë Anon Key configurada:', supabaseAnonKey ? 'S√≠' : 'No')
    
    // Intentar hacer una consulta simple para verificar la conexi√≥n
    const { error } = await supabase
      .from('_supabase_migrations')
      .select('version')
      .limit(1)
    
    if (error && error.code !== 'PGRST116') {
      // PGRST116 significa que la tabla no existe, pero la conexi√≥n funciona
      console.error('‚ùå Error de conexi√≥n:', error.message)
      return { connected: false, error: error.message }
    }
    
    console.log('‚úÖ Conexi√≥n con Supabase exitosa')
    return { connected: true }
  } catch (error) {
    console.error('‚ùå Error al verificar conexi√≥n:', error.message)
    return { connected: false, error: error.message }
  }
}

// Exportar por defecto el cliente
export default supabase